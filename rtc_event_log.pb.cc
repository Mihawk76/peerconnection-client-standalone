// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtc_event_log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rtc_event_log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace webrtc {
namespace rtclog {

void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto() {
  delete EventStream::default_instance_;
  delete Event::default_instance_;
  delete RtpPacket::default_instance_;
  delete RtcpPacket::default_instance_;
  delete AudioPlayoutEvent::default_instance_;
  delete BwePacketLossEvent::default_instance_;
  delete VideoReceiveConfig::default_instance_;
  delete DecoderConfig::default_instance_;
  delete RtpHeaderExtension::default_instance_;
  delete RtxConfig::default_instance_;
  delete RtxMap::default_instance_;
  delete VideoSendConfig::default_instance_;
  delete EncoderConfig::default_instance_;
  delete AudioReceiveConfig::default_instance_;
  delete AudioSendConfig::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_rtc_5fevent_5flog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  EventStream::default_instance_ = new EventStream();
  Event::default_instance_ = new Event();
  RtpPacket::default_instance_ = new RtpPacket();
  RtcpPacket::default_instance_ = new RtcpPacket();
  AudioPlayoutEvent::default_instance_ = new AudioPlayoutEvent();
  BwePacketLossEvent::default_instance_ = new BwePacketLossEvent();
  VideoReceiveConfig::default_instance_ = new VideoReceiveConfig();
  DecoderConfig::default_instance_ = new DecoderConfig();
  RtpHeaderExtension::default_instance_ = new RtpHeaderExtension();
  RtxConfig::default_instance_ = new RtxConfig();
  RtxMap::default_instance_ = new RtxMap();
  VideoSendConfig::default_instance_ = new VideoSendConfig();
  EncoderConfig::default_instance_ = new EncoderConfig();
  AudioReceiveConfig::default_instance_ = new AudioReceiveConfig();
  AudioSendConfig::default_instance_ = new AudioSendConfig();
  EventStream::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  RtpPacket::default_instance_->InitAsDefaultInstance();
  RtcpPacket::default_instance_->InitAsDefaultInstance();
  AudioPlayoutEvent::default_instance_->InitAsDefaultInstance();
  BwePacketLossEvent::default_instance_->InitAsDefaultInstance();
  VideoReceiveConfig::default_instance_->InitAsDefaultInstance();
  DecoderConfig::default_instance_->InitAsDefaultInstance();
  RtpHeaderExtension::default_instance_->InitAsDefaultInstance();
  RtxConfig::default_instance_->InitAsDefaultInstance();
  RtxMap::default_instance_->InitAsDefaultInstance();
  VideoSendConfig::default_instance_->InitAsDefaultInstance();
  EncoderConfig::default_instance_->InitAsDefaultInstance();
  AudioReceiveConfig::default_instance_->InitAsDefaultInstance();
  AudioSendConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_rtc_5fevent_5flog_2eproto_once_);
void protobuf_AddDesc_rtc_5fevent_5flog_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_rtc_5fevent_5flog_2eproto_once_,
                 &protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rtc_5fevent_5flog_2eproto {
  StaticDescriptorInitializer_rtc_5fevent_5flog_2eproto() {
    protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  }
} static_descriptor_initializer_rtc_5fevent_5flog_2eproto_;
#endif
bool MediaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventStream::kStreamFieldNumber;
#endif  // !_MSC_VER

EventStream::EventStream()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EventStream::InitAsDefaultInstance() {
}

EventStream::EventStream(const EventStream& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EventStream::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventStream::~EventStream() {
  SharedDtor();
}

void EventStream::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EventStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EventStream& EventStream::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#endif
  return *default_instance_;
}

EventStream* EventStream::default_instance_ = NULL;

EventStream* EventStream::New() const {
  return new EventStream;
}

void EventStream::Clear() {
  stream_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EventStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .webrtc.rtclog.Event stream = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stream()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stream;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .webrtc.rtclog.Event stream = 1;
  for (int i = 0; i < this->stream_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->stream(i), output);
  }

}

int EventStream::ByteSize() const {
  int total_size = 0;

  // repeated .webrtc.rtclog.Event stream = 1;
  total_size += 1 * this->stream_size();
  for (int i = 0; i < this->stream_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stream(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventStream::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EventStream*>(&from));
}

void EventStream::MergeFrom(const EventStream& from) {
  GOOGLE_CHECK_NE(&from, this);
  stream_.MergeFrom(from.stream_);
}

void EventStream::CopyFrom(const EventStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventStream::IsInitialized() const {

  return true;
}

void EventStream::Swap(EventStream* other) {
  if (other != this) {
    stream_.Swap(&other->stream_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EventStream::GetTypeName() const {
  return "webrtc.rtclog.EventStream";
}


// ===================================================================

bool Event_EventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Event_EventType Event::UNKNOWN_EVENT;
const Event_EventType Event::LOG_START;
const Event_EventType Event::LOG_END;
const Event_EventType Event::RTP_EVENT;
const Event_EventType Event::RTCP_EVENT;
const Event_EventType Event::AUDIO_PLAYOUT_EVENT;
const Event_EventType Event::BWE_PACKET_LOSS_EVENT;
const Event_EventType Event::BWE_PACKET_DELAY_EVENT;
const Event_EventType Event::VIDEO_RECEIVER_CONFIG_EVENT;
const Event_EventType Event::VIDEO_SENDER_CONFIG_EVENT;
const Event_EventType Event::AUDIO_RECEIVER_CONFIG_EVENT;
const Event_EventType Event::AUDIO_SENDER_CONFIG_EVENT;
const Event_EventType Event::EventType_MIN;
const Event_EventType Event::EventType_MAX;
const int Event::EventType_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kTimestampUsFieldNumber;
const int Event::kTypeFieldNumber;
const int Event::kRtpPacketFieldNumber;
const int Event::kRtcpPacketFieldNumber;
const int Event::kAudioPlayoutEventFieldNumber;
const int Event::kBwePacketLossEventFieldNumber;
const int Event::kVideoReceiverConfigFieldNumber;
const int Event::kVideoSenderConfigFieldNumber;
const int Event::kAudioReceiverConfigFieldNumber;
const int Event::kAudioSenderConfigFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rtp_packet_ = const_cast< ::webrtc::rtclog::RtpPacket*>(
      ::webrtc::rtclog::RtpPacket::internal_default_instance());
#else
  rtp_packet_ = const_cast< ::webrtc::rtclog::RtpPacket*>(&::webrtc::rtclog::RtpPacket::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rtcp_packet_ = const_cast< ::webrtc::rtclog::RtcpPacket*>(
      ::webrtc::rtclog::RtcpPacket::internal_default_instance());
#else
  rtcp_packet_ = const_cast< ::webrtc::rtclog::RtcpPacket*>(&::webrtc::rtclog::RtcpPacket::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  audio_playout_event_ = const_cast< ::webrtc::rtclog::AudioPlayoutEvent*>(
      ::webrtc::rtclog::AudioPlayoutEvent::internal_default_instance());
#else
  audio_playout_event_ = const_cast< ::webrtc::rtclog::AudioPlayoutEvent*>(&::webrtc::rtclog::AudioPlayoutEvent::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bwe_packet_loss_event_ = const_cast< ::webrtc::rtclog::BwePacketLossEvent*>(
      ::webrtc::rtclog::BwePacketLossEvent::internal_default_instance());
#else
  bwe_packet_loss_event_ = const_cast< ::webrtc::rtclog::BwePacketLossEvent*>(&::webrtc::rtclog::BwePacketLossEvent::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  video_receiver_config_ = const_cast< ::webrtc::rtclog::VideoReceiveConfig*>(
      ::webrtc::rtclog::VideoReceiveConfig::internal_default_instance());
#else
  video_receiver_config_ = const_cast< ::webrtc::rtclog::VideoReceiveConfig*>(&::webrtc::rtclog::VideoReceiveConfig::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  video_sender_config_ = const_cast< ::webrtc::rtclog::VideoSendConfig*>(
      ::webrtc::rtclog::VideoSendConfig::internal_default_instance());
#else
  video_sender_config_ = const_cast< ::webrtc::rtclog::VideoSendConfig*>(&::webrtc::rtclog::VideoSendConfig::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  audio_receiver_config_ = const_cast< ::webrtc::rtclog::AudioReceiveConfig*>(
      ::webrtc::rtclog::AudioReceiveConfig::internal_default_instance());
#else
  audio_receiver_config_ = const_cast< ::webrtc::rtclog::AudioReceiveConfig*>(&::webrtc::rtclog::AudioReceiveConfig::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  audio_sender_config_ = const_cast< ::webrtc::rtclog::AudioSendConfig*>(
      ::webrtc::rtclog::AudioSendConfig::internal_default_instance());
#else
  audio_sender_config_ = const_cast< ::webrtc::rtclog::AudioSendConfig*>(&::webrtc::rtclog::AudioSendConfig::default_instance());
#endif
}

Event::Event(const Event& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  timestamp_us_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  rtp_packet_ = NULL;
  rtcp_packet_ = NULL;
  audio_playout_event_ = NULL;
  bwe_packet_loss_event_ = NULL;
  video_receiver_config_ = NULL;
  video_sender_config_ = NULL;
  audio_receiver_config_ = NULL;
  audio_sender_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete rtp_packet_;
    delete rtcp_packet_;
    delete audio_playout_event_;
    delete bwe_packet_loss_event_;
    delete video_receiver_config_;
    delete video_sender_config_;
    delete audio_receiver_config_;
    delete audio_sender_config_;
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Event& Event::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#endif
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_us_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    if (has_rtp_packet()) {
      if (rtp_packet_ != NULL) rtp_packet_->::webrtc::rtclog::RtpPacket::Clear();
    }
    if (has_rtcp_packet()) {
      if (rtcp_packet_ != NULL) rtcp_packet_->::webrtc::rtclog::RtcpPacket::Clear();
    }
    if (has_audio_playout_event()) {
      if (audio_playout_event_ != NULL) audio_playout_event_->::webrtc::rtclog::AudioPlayoutEvent::Clear();
    }
    if (has_bwe_packet_loss_event()) {
      if (bwe_packet_loss_event_ != NULL) bwe_packet_loss_event_->::webrtc::rtclog::BwePacketLossEvent::Clear();
    }
    if (has_video_receiver_config()) {
      if (video_receiver_config_ != NULL) video_receiver_config_->::webrtc::rtclog::VideoReceiveConfig::Clear();
    }
    if (has_video_sender_config()) {
      if (video_sender_config_ != NULL) video_sender_config_->::webrtc::rtclog::VideoSendConfig::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_audio_receiver_config()) {
      if (audio_receiver_config_ != NULL) audio_receiver_config_->::webrtc::rtclog::AudioReceiveConfig::Clear();
    }
    if (has_audio_sender_config()) {
      if (audio_sender_config_ != NULL) audio_sender_config_->::webrtc::rtclog::AudioSendConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_us = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_us_)));
          set_has_timestamp_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .webrtc.rtclog.Event.EventType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog::Event_EventType_IsValid(value)) {
            set_type(static_cast< ::webrtc::rtclog::Event_EventType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rtp_packet;
        break;
      }

      // optional .webrtc.rtclog.RtpPacket rtp_packet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rtp_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rtp_packet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rtcp_packet;
        break;
      }

      // optional .webrtc.rtclog.RtcpPacket rtcp_packet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rtcp_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rtcp_packet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_audio_playout_event;
        break;
      }

      // optional .webrtc.rtclog.AudioPlayoutEvent audio_playout_event = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audio_playout_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_playout_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bwe_packet_loss_event;
        break;
      }

      // optional .webrtc.rtclog.BwePacketLossEvent bwe_packet_loss_event = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bwe_packet_loss_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bwe_packet_loss_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_video_receiver_config;
        break;
      }

      // optional .webrtc.rtclog.VideoReceiveConfig video_receiver_config = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video_receiver_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_receiver_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_video_sender_config;
        break;
      }

      // optional .webrtc.rtclog.VideoSendConfig video_sender_config = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video_sender_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_sender_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_audio_receiver_config;
        break;
      }

      // optional .webrtc.rtclog.AudioReceiveConfig audio_receiver_config = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audio_receiver_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_receiver_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_audio_sender_config;
        break;
      }

      // optional .webrtc.rtclog.AudioSendConfig audio_sender_config = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audio_sender_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_sender_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 timestamp_us = 1;
  if (has_timestamp_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_us(), output);
  }

  // optional .webrtc.rtclog.Event.EventType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .webrtc.rtclog.RtpPacket rtp_packet = 3;
  if (has_rtp_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->rtp_packet(), output);
  }

  // optional .webrtc.rtclog.RtcpPacket rtcp_packet = 4;
  if (has_rtcp_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->rtcp_packet(), output);
  }

  // optional .webrtc.rtclog.AudioPlayoutEvent audio_playout_event = 5;
  if (has_audio_playout_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->audio_playout_event(), output);
  }

  // optional .webrtc.rtclog.BwePacketLossEvent bwe_packet_loss_event = 6;
  if (has_bwe_packet_loss_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->bwe_packet_loss_event(), output);
  }

  // optional .webrtc.rtclog.VideoReceiveConfig video_receiver_config = 8;
  if (has_video_receiver_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->video_receiver_config(), output);
  }

  // optional .webrtc.rtclog.VideoSendConfig video_sender_config = 9;
  if (has_video_sender_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->video_sender_config(), output);
  }

  // optional .webrtc.rtclog.AudioReceiveConfig audio_receiver_config = 10;
  if (has_audio_receiver_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->audio_receiver_config(), output);
  }

  // optional .webrtc.rtclog.AudioSendConfig audio_sender_config = 11;
  if (has_audio_sender_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->audio_sender_config(), output);
  }

}

int Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp_us = 1;
    if (has_timestamp_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_us());
    }

    // optional .webrtc.rtclog.Event.EventType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .webrtc.rtclog.RtpPacket rtp_packet = 3;
    if (has_rtp_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rtp_packet());
    }

    // optional .webrtc.rtclog.RtcpPacket rtcp_packet = 4;
    if (has_rtcp_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rtcp_packet());
    }

    // optional .webrtc.rtclog.AudioPlayoutEvent audio_playout_event = 5;
    if (has_audio_playout_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audio_playout_event());
    }

    // optional .webrtc.rtclog.BwePacketLossEvent bwe_packet_loss_event = 6;
    if (has_bwe_packet_loss_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bwe_packet_loss_event());
    }

    // optional .webrtc.rtclog.VideoReceiveConfig video_receiver_config = 8;
    if (has_video_receiver_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video_receiver_config());
    }

    // optional .webrtc.rtclog.VideoSendConfig video_sender_config = 9;
    if (has_video_sender_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video_sender_config());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .webrtc.rtclog.AudioReceiveConfig audio_receiver_config = 10;
    if (has_audio_receiver_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audio_receiver_config());
    }

    // optional .webrtc.rtclog.AudioSendConfig audio_sender_config = 11;
    if (has_audio_sender_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audio_sender_config());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Event*>(&from));
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_us()) {
      set_timestamp_us(from.timestamp_us());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rtp_packet()) {
      mutable_rtp_packet()->::webrtc::rtclog::RtpPacket::MergeFrom(from.rtp_packet());
    }
    if (from.has_rtcp_packet()) {
      mutable_rtcp_packet()->::webrtc::rtclog::RtcpPacket::MergeFrom(from.rtcp_packet());
    }
    if (from.has_audio_playout_event()) {
      mutable_audio_playout_event()->::webrtc::rtclog::AudioPlayoutEvent::MergeFrom(from.audio_playout_event());
    }
    if (from.has_bwe_packet_loss_event()) {
      mutable_bwe_packet_loss_event()->::webrtc::rtclog::BwePacketLossEvent::MergeFrom(from.bwe_packet_loss_event());
    }
    if (from.has_video_receiver_config()) {
      mutable_video_receiver_config()->::webrtc::rtclog::VideoReceiveConfig::MergeFrom(from.video_receiver_config());
    }
    if (from.has_video_sender_config()) {
      mutable_video_sender_config()->::webrtc::rtclog::VideoSendConfig::MergeFrom(from.video_sender_config());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_audio_receiver_config()) {
      mutable_audio_receiver_config()->::webrtc::rtclog::AudioReceiveConfig::MergeFrom(from.audio_receiver_config());
    }
    if (from.has_audio_sender_config()) {
      mutable_audio_sender_config()->::webrtc::rtclog::AudioSendConfig::MergeFrom(from.audio_sender_config());
    }
  }
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {

  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(timestamp_us_, other->timestamp_us_);
    std::swap(type_, other->type_);
    std::swap(rtp_packet_, other->rtp_packet_);
    std::swap(rtcp_packet_, other->rtcp_packet_);
    std::swap(audio_playout_event_, other->audio_playout_event_);
    std::swap(bwe_packet_loss_event_, other->bwe_packet_loss_event_);
    std::swap(video_receiver_config_, other->video_receiver_config_);
    std::swap(video_sender_config_, other->video_sender_config_);
    std::swap(audio_receiver_config_, other->audio_receiver_config_);
    std::swap(audio_sender_config_, other->audio_sender_config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Event::GetTypeName() const {
  return "webrtc.rtclog.Event";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtpPacket::kIncomingFieldNumber;
const int RtpPacket::kTypeFieldNumber;
const int RtpPacket::kPacketLengthFieldNumber;
const int RtpPacket::kHeaderFieldNumber;
#endif  // !_MSC_VER

RtpPacket::RtpPacket()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RtpPacket::InitAsDefaultInstance() {
}

RtpPacket::RtpPacket(const RtpPacket& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RtpPacket::SharedCtor() {
  _cached_size_ = 0;
  incoming_ = false;
  type_ = 0;
  packet_length_ = 0u;
  header_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtpPacket::~RtpPacket() {
  SharedDtor();
}

void RtpPacket::SharedDtor() {
  if (header_ != &::google::protobuf::internal::GetEmptyString()) {
    delete header_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RtpPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RtpPacket& RtpPacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#endif
  return *default_instance_;
}

RtpPacket* RtpPacket::default_instance_ = NULL;

RtpPacket* RtpPacket::New() const {
  return new RtpPacket;
}

void RtpPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    incoming_ = false;
    type_ = 0;
    packet_length_ = 0u;
    if (has_header()) {
      if (header_ != &::google::protobuf::internal::GetEmptyString()) {
        header_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RtpPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool incoming = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incoming_)));
          set_has_incoming();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .webrtc.rtclog.MediaType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog::MediaType_IsValid(value)) {
            set_type(static_cast< ::webrtc::rtclog::MediaType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_packet_length;
        break;
      }

      // optional uint32 packet_length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packet_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_length_)));
          set_has_packet_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_header;
        break;
      }

      // optional bytes header = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtpPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool incoming = 1;
  if (has_incoming()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->incoming(), output);
  }

  // optional .webrtc.rtclog.MediaType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 packet_length = 3;
  if (has_packet_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->packet_length(), output);
  }

  // optional bytes header = 4;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->header(), output);
  }

}

int RtpPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool incoming = 1;
    if (has_incoming()) {
      total_size += 1 + 1;
    }

    // optional .webrtc.rtclog.MediaType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 packet_length = 3;
    if (has_packet_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packet_length());
    }

    // optional bytes header = 4;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->header());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtpPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RtpPacket*>(&from));
}

void RtpPacket::MergeFrom(const RtpPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_incoming()) {
      set_incoming(from.incoming());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_packet_length()) {
      set_packet_length(from.packet_length());
    }
    if (from.has_header()) {
      set_header(from.header());
    }
  }
}

void RtpPacket::CopyFrom(const RtpPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtpPacket::IsInitialized() const {

  return true;
}

void RtpPacket::Swap(RtpPacket* other) {
  if (other != this) {
    std::swap(incoming_, other->incoming_);
    std::swap(type_, other->type_);
    std::swap(packet_length_, other->packet_length_);
    std::swap(header_, other->header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RtpPacket::GetTypeName() const {
  return "webrtc.rtclog.RtpPacket";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtcpPacket::kIncomingFieldNumber;
const int RtcpPacket::kTypeFieldNumber;
const int RtcpPacket::kPacketDataFieldNumber;
#endif  // !_MSC_VER

RtcpPacket::RtcpPacket()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RtcpPacket::InitAsDefaultInstance() {
}

RtcpPacket::RtcpPacket(const RtcpPacket& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RtcpPacket::SharedCtor() {
  _cached_size_ = 0;
  incoming_ = false;
  type_ = 0;
  packet_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtcpPacket::~RtcpPacket() {
  SharedDtor();
}

void RtcpPacket::SharedDtor() {
  if (packet_data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete packet_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RtcpPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RtcpPacket& RtcpPacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#endif
  return *default_instance_;
}

RtcpPacket* RtcpPacket::default_instance_ = NULL;

RtcpPacket* RtcpPacket::New() const {
  return new RtcpPacket;
}

void RtcpPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    incoming_ = false;
    type_ = 0;
    if (has_packet_data()) {
      if (packet_data_ != &::google::protobuf::internal::GetEmptyString()) {
        packet_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RtcpPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool incoming = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incoming_)));
          set_has_incoming();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .webrtc.rtclog.MediaType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog::MediaType_IsValid(value)) {
            set_type(static_cast< ::webrtc::rtclog::MediaType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_packet_data;
        break;
      }

      // optional bytes packet_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packet_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtcpPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool incoming = 1;
  if (has_incoming()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->incoming(), output);
  }

  // optional .webrtc.rtclog.MediaType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bytes packet_data = 3;
  if (has_packet_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->packet_data(), output);
  }

}

int RtcpPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool incoming = 1;
    if (has_incoming()) {
      total_size += 1 + 1;
    }

    // optional .webrtc.rtclog.MediaType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes packet_data = 3;
    if (has_packet_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packet_data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtcpPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RtcpPacket*>(&from));
}

void RtcpPacket::MergeFrom(const RtcpPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_incoming()) {
      set_incoming(from.incoming());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_packet_data()) {
      set_packet_data(from.packet_data());
    }
  }
}

void RtcpPacket::CopyFrom(const RtcpPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcpPacket::IsInitialized() const {

  return true;
}

void RtcpPacket::Swap(RtcpPacket* other) {
  if (other != this) {
    std::swap(incoming_, other->incoming_);
    std::swap(type_, other->type_);
    std::swap(packet_data_, other->packet_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RtcpPacket::GetTypeName() const {
  return "webrtc.rtclog.RtcpPacket";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioPlayoutEvent::kLocalSsrcFieldNumber;
#endif  // !_MSC_VER

AudioPlayoutEvent::AudioPlayoutEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AudioPlayoutEvent::InitAsDefaultInstance() {
}

AudioPlayoutEvent::AudioPlayoutEvent(const AudioPlayoutEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AudioPlayoutEvent::SharedCtor() {
  _cached_size_ = 0;
  local_ssrc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioPlayoutEvent::~AudioPlayoutEvent() {
  SharedDtor();
}

void AudioPlayoutEvent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AudioPlayoutEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioPlayoutEvent& AudioPlayoutEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#endif
  return *default_instance_;
}

AudioPlayoutEvent* AudioPlayoutEvent::default_instance_ = NULL;

AudioPlayoutEvent* AudioPlayoutEvent::New() const {
  return new AudioPlayoutEvent;
}

void AudioPlayoutEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    local_ssrc_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AudioPlayoutEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 local_ssrc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_ssrc_)));
          set_has_local_ssrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AudioPlayoutEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 local_ssrc = 2;
  if (has_local_ssrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->local_ssrc(), output);
  }

}

int AudioPlayoutEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 local_ssrc = 2;
    if (has_local_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_ssrc());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioPlayoutEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioPlayoutEvent*>(&from));
}

void AudioPlayoutEvent::MergeFrom(const AudioPlayoutEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_ssrc()) {
      set_local_ssrc(from.local_ssrc());
    }
  }
}

void AudioPlayoutEvent::CopyFrom(const AudioPlayoutEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioPlayoutEvent::IsInitialized() const {

  return true;
}

void AudioPlayoutEvent::Swap(AudioPlayoutEvent* other) {
  if (other != this) {
    std::swap(local_ssrc_, other->local_ssrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AudioPlayoutEvent::GetTypeName() const {
  return "webrtc.rtclog.AudioPlayoutEvent";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BwePacketLossEvent::kBitrateFieldNumber;
const int BwePacketLossEvent::kFractionLossFieldNumber;
const int BwePacketLossEvent::kTotalPacketsFieldNumber;
#endif  // !_MSC_VER

BwePacketLossEvent::BwePacketLossEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BwePacketLossEvent::InitAsDefaultInstance() {
}

BwePacketLossEvent::BwePacketLossEvent(const BwePacketLossEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BwePacketLossEvent::SharedCtor() {
  _cached_size_ = 0;
  bitrate_ = 0;
  fraction_loss_ = 0u;
  total_packets_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BwePacketLossEvent::~BwePacketLossEvent() {
  SharedDtor();
}

void BwePacketLossEvent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BwePacketLossEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BwePacketLossEvent& BwePacketLossEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#endif
  return *default_instance_;
}

BwePacketLossEvent* BwePacketLossEvent::default_instance_ = NULL;

BwePacketLossEvent* BwePacketLossEvent::New() const {
  return new BwePacketLossEvent;
}

void BwePacketLossEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bitrate_ = 0;
    fraction_loss_ = 0u;
    total_packets_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BwePacketLossEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bitrate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitrate_)));
          set_has_bitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fraction_loss;
        break;
      }

      // optional uint32 fraction_loss = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fraction_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fraction_loss_)));
          set_has_fraction_loss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_packets;
        break;
      }

      // optional int32 total_packets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_packets_)));
          set_has_total_packets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BwePacketLossEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bitrate = 1;
  if (has_bitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bitrate(), output);
  }

  // optional uint32 fraction_loss = 2;
  if (has_fraction_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fraction_loss(), output);
  }

  // optional int32 total_packets = 3;
  if (has_total_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_packets(), output);
  }

}

int BwePacketLossEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bitrate = 1;
    if (has_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bitrate());
    }

    // optional uint32 fraction_loss = 2;
    if (has_fraction_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fraction_loss());
    }

    // optional int32 total_packets = 3;
    if (has_total_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_packets());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BwePacketLossEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BwePacketLossEvent*>(&from));
}

void BwePacketLossEvent::MergeFrom(const BwePacketLossEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bitrate()) {
      set_bitrate(from.bitrate());
    }
    if (from.has_fraction_loss()) {
      set_fraction_loss(from.fraction_loss());
    }
    if (from.has_total_packets()) {
      set_total_packets(from.total_packets());
    }
  }
}

void BwePacketLossEvent::CopyFrom(const BwePacketLossEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BwePacketLossEvent::IsInitialized() const {

  return true;
}

void BwePacketLossEvent::Swap(BwePacketLossEvent* other) {
  if (other != this) {
    std::swap(bitrate_, other->bitrate_);
    std::swap(fraction_loss_, other->fraction_loss_);
    std::swap(total_packets_, other->total_packets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BwePacketLossEvent::GetTypeName() const {
  return "webrtc.rtclog.BwePacketLossEvent";
}


// ===================================================================

bool VideoReceiveConfig_RtcpMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VideoReceiveConfig_RtcpMode VideoReceiveConfig::RTCP_COMPOUND;
const VideoReceiveConfig_RtcpMode VideoReceiveConfig::RTCP_REDUCEDSIZE;
const VideoReceiveConfig_RtcpMode VideoReceiveConfig::RtcpMode_MIN;
const VideoReceiveConfig_RtcpMode VideoReceiveConfig::RtcpMode_MAX;
const int VideoReceiveConfig::RtcpMode_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoReceiveConfig::kRemoteSsrcFieldNumber;
const int VideoReceiveConfig::kLocalSsrcFieldNumber;
const int VideoReceiveConfig::kRtcpModeFieldNumber;
const int VideoReceiveConfig::kRembFieldNumber;
const int VideoReceiveConfig::kRtxMapFieldNumber;
const int VideoReceiveConfig::kHeaderExtensionsFieldNumber;
const int VideoReceiveConfig::kDecodersFieldNumber;
#endif  // !_MSC_VER

VideoReceiveConfig::VideoReceiveConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VideoReceiveConfig::InitAsDefaultInstance() {
}

VideoReceiveConfig::VideoReceiveConfig(const VideoReceiveConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VideoReceiveConfig::SharedCtor() {
  _cached_size_ = 0;
  remote_ssrc_ = 0u;
  local_ssrc_ = 0u;
  rtcp_mode_ = 1;
  remb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoReceiveConfig::~VideoReceiveConfig() {
  SharedDtor();
}

void VideoReceiveConfig::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VideoReceiveConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoReceiveConfig& VideoReceiveConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#endif
  return *default_instance_;
}

VideoReceiveConfig* VideoReceiveConfig::default_instance_ = NULL;

VideoReceiveConfig* VideoReceiveConfig::New() const {
  return new VideoReceiveConfig;
}

void VideoReceiveConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remote_ssrc_ = 0u;
    local_ssrc_ = 0u;
    rtcp_mode_ = 1;
    remb_ = false;
  }
  rtx_map_.Clear();
  header_extensions_.Clear();
  decoders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VideoReceiveConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 remote_ssrc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_ssrc_)));
          set_has_remote_ssrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_local_ssrc;
        break;
      }

      // optional uint32 local_ssrc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_ssrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_ssrc_)));
          set_has_local_ssrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rtcp_mode;
        break;
      }

      // optional .webrtc.rtclog.VideoReceiveConfig.RtcpMode rtcp_mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtcp_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog::VideoReceiveConfig_RtcpMode_IsValid(value)) {
            set_rtcp_mode(static_cast< ::webrtc::rtclog::VideoReceiveConfig_RtcpMode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remb;
        break;
      }

      // optional bool remb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remb_)));
          set_has_remb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rtx_map;
        break;
      }

      // repeated .webrtc.rtclog.RtxMap rtx_map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rtx_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rtx_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rtx_map;
        if (input->ExpectTag(50)) goto parse_header_extensions;
        break;
      }

      // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_extensions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_header_extensions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_header_extensions;
        if (input->ExpectTag(58)) goto parse_decoders;
        break;
      }

      // repeated .webrtc.rtclog.DecoderConfig decoders = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_decoders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_decoders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_decoders;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoReceiveConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 remote_ssrc = 1;
  if (has_remote_ssrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remote_ssrc(), output);
  }

  // optional uint32 local_ssrc = 2;
  if (has_local_ssrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->local_ssrc(), output);
  }

  // optional .webrtc.rtclog.VideoReceiveConfig.RtcpMode rtcp_mode = 3;
  if (has_rtcp_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->rtcp_mode(), output);
  }

  // optional bool remb = 4;
  if (has_remb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->remb(), output);
  }

  // repeated .webrtc.rtclog.RtxMap rtx_map = 5;
  for (int i = 0; i < this->rtx_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->rtx_map(i), output);
  }

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 6;
  for (int i = 0; i < this->header_extensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->header_extensions(i), output);
  }

  // repeated .webrtc.rtclog.DecoderConfig decoders = 7;
  for (int i = 0; i < this->decoders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->decoders(i), output);
  }

}

int VideoReceiveConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 remote_ssrc = 1;
    if (has_remote_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_ssrc());
    }

    // optional uint32 local_ssrc = 2;
    if (has_local_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_ssrc());
    }

    // optional .webrtc.rtclog.VideoReceiveConfig.RtcpMode rtcp_mode = 3;
    if (has_rtcp_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rtcp_mode());
    }

    // optional bool remb = 4;
    if (has_remb()) {
      total_size += 1 + 1;
    }

  }
  // repeated .webrtc.rtclog.RtxMap rtx_map = 5;
  total_size += 1 * this->rtx_map_size();
  for (int i = 0; i < this->rtx_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rtx_map(i));
  }

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 6;
  total_size += 1 * this->header_extensions_size();
  for (int i = 0; i < this->header_extensions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->header_extensions(i));
  }

  // repeated .webrtc.rtclog.DecoderConfig decoders = 7;
  total_size += 1 * this->decoders_size();
  for (int i = 0; i < this->decoders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->decoders(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoReceiveConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoReceiveConfig*>(&from));
}

void VideoReceiveConfig::MergeFrom(const VideoReceiveConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  rtx_map_.MergeFrom(from.rtx_map_);
  header_extensions_.MergeFrom(from.header_extensions_);
  decoders_.MergeFrom(from.decoders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remote_ssrc()) {
      set_remote_ssrc(from.remote_ssrc());
    }
    if (from.has_local_ssrc()) {
      set_local_ssrc(from.local_ssrc());
    }
    if (from.has_rtcp_mode()) {
      set_rtcp_mode(from.rtcp_mode());
    }
    if (from.has_remb()) {
      set_remb(from.remb());
    }
  }
}

void VideoReceiveConfig::CopyFrom(const VideoReceiveConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoReceiveConfig::IsInitialized() const {

  return true;
}

void VideoReceiveConfig::Swap(VideoReceiveConfig* other) {
  if (other != this) {
    std::swap(remote_ssrc_, other->remote_ssrc_);
    std::swap(local_ssrc_, other->local_ssrc_);
    std::swap(rtcp_mode_, other->rtcp_mode_);
    std::swap(remb_, other->remb_);
    rtx_map_.Swap(&other->rtx_map_);
    header_extensions_.Swap(&other->header_extensions_);
    decoders_.Swap(&other->decoders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VideoReceiveConfig::GetTypeName() const {
  return "webrtc.rtclog.VideoReceiveConfig";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecoderConfig::kNameFieldNumber;
const int DecoderConfig::kPayloadTypeFieldNumber;
#endif  // !_MSC_VER

DecoderConfig::DecoderConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DecoderConfig::InitAsDefaultInstance() {
}

DecoderConfig::DecoderConfig(const DecoderConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DecoderConfig::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  payload_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecoderConfig::~DecoderConfig() {
  SharedDtor();
}

void DecoderConfig::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DecoderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DecoderConfig& DecoderConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#endif
  return *default_instance_;
}

DecoderConfig* DecoderConfig::default_instance_ = NULL;

DecoderConfig* DecoderConfig::New() const {
  return new DecoderConfig;
}

void DecoderConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    payload_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DecoderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_payload_type;
        break;
      }

      // optional int32 payload_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payload_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payload_type_)));
          set_has_payload_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DecoderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 payload_type = 2;
  if (has_payload_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->payload_type(), output);
  }

}

int DecoderConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 payload_type = 2;
    if (has_payload_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payload_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecoderConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DecoderConfig*>(&from));
}

void DecoderConfig::MergeFrom(const DecoderConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_payload_type()) {
      set_payload_type(from.payload_type());
    }
  }
}

void DecoderConfig::CopyFrom(const DecoderConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecoderConfig::IsInitialized() const {

  return true;
}

void DecoderConfig::Swap(DecoderConfig* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(payload_type_, other->payload_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DecoderConfig::GetTypeName() const {
  return "webrtc.rtclog.DecoderConfig";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtpHeaderExtension::kNameFieldNumber;
const int RtpHeaderExtension::kIdFieldNumber;
#endif  // !_MSC_VER

RtpHeaderExtension::RtpHeaderExtension()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RtpHeaderExtension::InitAsDefaultInstance() {
}

RtpHeaderExtension::RtpHeaderExtension(const RtpHeaderExtension& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RtpHeaderExtension::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtpHeaderExtension::~RtpHeaderExtension() {
  SharedDtor();
}

void RtpHeaderExtension::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RtpHeaderExtension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RtpHeaderExtension& RtpHeaderExtension::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#endif
  return *default_instance_;
}

RtpHeaderExtension* RtpHeaderExtension::default_instance_ = NULL;

RtpHeaderExtension* RtpHeaderExtension::New() const {
  return new RtpHeaderExtension;
}

void RtpHeaderExtension::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RtpHeaderExtension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtpHeaderExtension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

}

int RtpHeaderExtension::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtpHeaderExtension::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RtpHeaderExtension*>(&from));
}

void RtpHeaderExtension::MergeFrom(const RtpHeaderExtension& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void RtpHeaderExtension::CopyFrom(const RtpHeaderExtension& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtpHeaderExtension::IsInitialized() const {

  return true;
}

void RtpHeaderExtension::Swap(RtpHeaderExtension* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RtpHeaderExtension::GetTypeName() const {
  return "webrtc.rtclog.RtpHeaderExtension";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtxConfig::kRtxSsrcFieldNumber;
const int RtxConfig::kRtxPayloadTypeFieldNumber;
#endif  // !_MSC_VER

RtxConfig::RtxConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RtxConfig::InitAsDefaultInstance() {
}

RtxConfig::RtxConfig(const RtxConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RtxConfig::SharedCtor() {
  _cached_size_ = 0;
  rtx_ssrc_ = 0u;
  rtx_payload_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtxConfig::~RtxConfig() {
  SharedDtor();
}

void RtxConfig::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RtxConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RtxConfig& RtxConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#endif
  return *default_instance_;
}

RtxConfig* RtxConfig::default_instance_ = NULL;

RtxConfig* RtxConfig::New() const {
  return new RtxConfig;
}

void RtxConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rtx_ssrc_ = 0u;
    rtx_payload_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RtxConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rtx_ssrc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtx_ssrc_)));
          set_has_rtx_ssrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rtx_payload_type;
        break;
      }

      // optional int32 rtx_payload_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtx_payload_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtx_payload_type_)));
          set_has_rtx_payload_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtxConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rtx_ssrc = 1;
  if (has_rtx_ssrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rtx_ssrc(), output);
  }

  // optional int32 rtx_payload_type = 2;
  if (has_rtx_payload_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rtx_payload_type(), output);
  }

}

int RtxConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rtx_ssrc = 1;
    if (has_rtx_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtx_ssrc());
    }

    // optional int32 rtx_payload_type = 2;
    if (has_rtx_payload_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rtx_payload_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtxConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RtxConfig*>(&from));
}

void RtxConfig::MergeFrom(const RtxConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rtx_ssrc()) {
      set_rtx_ssrc(from.rtx_ssrc());
    }
    if (from.has_rtx_payload_type()) {
      set_rtx_payload_type(from.rtx_payload_type());
    }
  }
}

void RtxConfig::CopyFrom(const RtxConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtxConfig::IsInitialized() const {

  return true;
}

void RtxConfig::Swap(RtxConfig* other) {
  if (other != this) {
    std::swap(rtx_ssrc_, other->rtx_ssrc_);
    std::swap(rtx_payload_type_, other->rtx_payload_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RtxConfig::GetTypeName() const {
  return "webrtc.rtclog.RtxConfig";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtxMap::kPayloadTypeFieldNumber;
const int RtxMap::kConfigFieldNumber;
#endif  // !_MSC_VER

RtxMap::RtxMap()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RtxMap::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  config_ = const_cast< ::webrtc::rtclog::RtxConfig*>(
      ::webrtc::rtclog::RtxConfig::internal_default_instance());
#else
  config_ = const_cast< ::webrtc::rtclog::RtxConfig*>(&::webrtc::rtclog::RtxConfig::default_instance());
#endif
}

RtxMap::RtxMap(const RtxMap& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RtxMap::SharedCtor() {
  _cached_size_ = 0;
  payload_type_ = 0;
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtxMap::~RtxMap() {
  SharedDtor();
}

void RtxMap::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete config_;
  }
}

void RtxMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RtxMap& RtxMap::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#endif
  return *default_instance_;
}

RtxMap* RtxMap::default_instance_ = NULL;

RtxMap* RtxMap::New() const {
  return new RtxMap;
}

void RtxMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    payload_type_ = 0;
    if (has_config()) {
      if (config_ != NULL) config_->::webrtc::rtclog::RtxConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RtxMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 payload_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payload_type_)));
          set_has_payload_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }

      // optional .webrtc.rtclog.RtxConfig config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtxMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 payload_type = 1;
  if (has_payload_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->payload_type(), output);
  }

  // optional .webrtc.rtclog.RtxConfig config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->config(), output);
  }

}

int RtxMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 payload_type = 1;
    if (has_payload_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payload_type());
    }

    // optional .webrtc.rtclog.RtxConfig config = 2;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtxMap::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RtxMap*>(&from));
}

void RtxMap::MergeFrom(const RtxMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload_type()) {
      set_payload_type(from.payload_type());
    }
    if (from.has_config()) {
      mutable_config()->::webrtc::rtclog::RtxConfig::MergeFrom(from.config());
    }
  }
}

void RtxMap::CopyFrom(const RtxMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtxMap::IsInitialized() const {

  return true;
}

void RtxMap::Swap(RtxMap* other) {
  if (other != this) {
    std::swap(payload_type_, other->payload_type_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RtxMap::GetTypeName() const {
  return "webrtc.rtclog.RtxMap";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoSendConfig::kSsrcsFieldNumber;
const int VideoSendConfig::kHeaderExtensionsFieldNumber;
const int VideoSendConfig::kRtxSsrcsFieldNumber;
const int VideoSendConfig::kRtxPayloadTypeFieldNumber;
const int VideoSendConfig::kEncoderFieldNumber;
#endif  // !_MSC_VER

VideoSendConfig::VideoSendConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VideoSendConfig::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  encoder_ = const_cast< ::webrtc::rtclog::EncoderConfig*>(
      ::webrtc::rtclog::EncoderConfig::internal_default_instance());
#else
  encoder_ = const_cast< ::webrtc::rtclog::EncoderConfig*>(&::webrtc::rtclog::EncoderConfig::default_instance());
#endif
}

VideoSendConfig::VideoSendConfig(const VideoSendConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VideoSendConfig::SharedCtor() {
  _cached_size_ = 0;
  rtx_payload_type_ = 0;
  encoder_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoSendConfig::~VideoSendConfig() {
  SharedDtor();
}

void VideoSendConfig::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete encoder_;
  }
}

void VideoSendConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoSendConfig& VideoSendConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#endif
  return *default_instance_;
}

VideoSendConfig* VideoSendConfig::default_instance_ = NULL;

VideoSendConfig* VideoSendConfig::New() const {
  return new VideoSendConfig;
}

void VideoSendConfig::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    rtx_payload_type_ = 0;
    if (has_encoder()) {
      if (encoder_ != NULL) encoder_->::webrtc::rtclog::EncoderConfig::Clear();
    }
  }
  ssrcs_.Clear();
  header_extensions_.Clear();
  rtx_ssrcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VideoSendConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ssrcs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ssrcs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_ssrcs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ssrcs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ssrcs;
        if (input->ExpectTag(18)) goto parse_header_extensions;
        break;
      }

      // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_extensions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_header_extensions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_header_extensions;
        if (input->ExpectTag(24)) goto parse_rtx_ssrcs;
        break;
      }

      // repeated uint32 rtx_ssrcs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtx_ssrcs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_rtx_ssrcs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rtx_ssrcs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rtx_ssrcs;
        if (input->ExpectTag(32)) goto parse_rtx_payload_type;
        break;
      }

      // optional int32 rtx_payload_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtx_payload_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtx_payload_type_)));
          set_has_rtx_payload_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_encoder;
        break;
      }

      // optional .webrtc.rtclog.EncoderConfig encoder = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encoder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoSendConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 ssrcs = 1;
  for (int i = 0; i < this->ssrcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->ssrcs(i), output);
  }

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
  for (int i = 0; i < this->header_extensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->header_extensions(i), output);
  }

  // repeated uint32 rtx_ssrcs = 3;
  for (int i = 0; i < this->rtx_ssrcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->rtx_ssrcs(i), output);
  }

  // optional int32 rtx_payload_type = 4;
  if (has_rtx_payload_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rtx_payload_type(), output);
  }

  // optional .webrtc.rtclog.EncoderConfig encoder = 5;
  if (has_encoder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->encoder(), output);
  }

}

int VideoSendConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 rtx_payload_type = 4;
    if (has_rtx_payload_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rtx_payload_type());
    }

    // optional .webrtc.rtclog.EncoderConfig encoder = 5;
    if (has_encoder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->encoder());
    }

  }
  // repeated uint32 ssrcs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ssrcs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ssrcs(i));
    }
    total_size += 1 * this->ssrcs_size() + data_size;
  }

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
  total_size += 1 * this->header_extensions_size();
  for (int i = 0; i < this->header_extensions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->header_extensions(i));
  }

  // repeated uint32 rtx_ssrcs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->rtx_ssrcs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rtx_ssrcs(i));
    }
    total_size += 1 * this->rtx_ssrcs_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoSendConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoSendConfig*>(&from));
}

void VideoSendConfig::MergeFrom(const VideoSendConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  ssrcs_.MergeFrom(from.ssrcs_);
  header_extensions_.MergeFrom(from.header_extensions_);
  rtx_ssrcs_.MergeFrom(from.rtx_ssrcs_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_rtx_payload_type()) {
      set_rtx_payload_type(from.rtx_payload_type());
    }
    if (from.has_encoder()) {
      mutable_encoder()->::webrtc::rtclog::EncoderConfig::MergeFrom(from.encoder());
    }
  }
}

void VideoSendConfig::CopyFrom(const VideoSendConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSendConfig::IsInitialized() const {

  return true;
}

void VideoSendConfig::Swap(VideoSendConfig* other) {
  if (other != this) {
    ssrcs_.Swap(&other->ssrcs_);
    header_extensions_.Swap(&other->header_extensions_);
    rtx_ssrcs_.Swap(&other->rtx_ssrcs_);
    std::swap(rtx_payload_type_, other->rtx_payload_type_);
    std::swap(encoder_, other->encoder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VideoSendConfig::GetTypeName() const {
  return "webrtc.rtclog.VideoSendConfig";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncoderConfig::kNameFieldNumber;
const int EncoderConfig::kPayloadTypeFieldNumber;
#endif  // !_MSC_VER

EncoderConfig::EncoderConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EncoderConfig::InitAsDefaultInstance() {
}

EncoderConfig::EncoderConfig(const EncoderConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EncoderConfig::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  payload_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncoderConfig::~EncoderConfig() {
  SharedDtor();
}

void EncoderConfig::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EncoderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EncoderConfig& EncoderConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#endif
  return *default_instance_;
}

EncoderConfig* EncoderConfig::default_instance_ = NULL;

EncoderConfig* EncoderConfig::New() const {
  return new EncoderConfig;
}

void EncoderConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    payload_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EncoderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_payload_type;
        break;
      }

      // optional int32 payload_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payload_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payload_type_)));
          set_has_payload_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EncoderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 payload_type = 2;
  if (has_payload_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->payload_type(), output);
  }

}

int EncoderConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 payload_type = 2;
    if (has_payload_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payload_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncoderConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EncoderConfig*>(&from));
}

void EncoderConfig::MergeFrom(const EncoderConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_payload_type()) {
      set_payload_type(from.payload_type());
    }
  }
}

void EncoderConfig::CopyFrom(const EncoderConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncoderConfig::IsInitialized() const {

  return true;
}

void EncoderConfig::Swap(EncoderConfig* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(payload_type_, other->payload_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EncoderConfig::GetTypeName() const {
  return "webrtc.rtclog.EncoderConfig";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioReceiveConfig::kRemoteSsrcFieldNumber;
const int AudioReceiveConfig::kLocalSsrcFieldNumber;
const int AudioReceiveConfig::kHeaderExtensionsFieldNumber;
#endif  // !_MSC_VER

AudioReceiveConfig::AudioReceiveConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AudioReceiveConfig::InitAsDefaultInstance() {
}

AudioReceiveConfig::AudioReceiveConfig(const AudioReceiveConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AudioReceiveConfig::SharedCtor() {
  _cached_size_ = 0;
  remote_ssrc_ = 0u;
  local_ssrc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioReceiveConfig::~AudioReceiveConfig() {
  SharedDtor();
}

void AudioReceiveConfig::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AudioReceiveConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioReceiveConfig& AudioReceiveConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#endif
  return *default_instance_;
}

AudioReceiveConfig* AudioReceiveConfig::default_instance_ = NULL;

AudioReceiveConfig* AudioReceiveConfig::New() const {
  return new AudioReceiveConfig;
}

void AudioReceiveConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remote_ssrc_ = 0u;
    local_ssrc_ = 0u;
  }
  header_extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AudioReceiveConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 remote_ssrc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_ssrc_)));
          set_has_remote_ssrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_local_ssrc;
        break;
      }

      // optional uint32 local_ssrc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_ssrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_ssrc_)));
          set_has_local_ssrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_header_extensions;
        break;
      }

      // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_extensions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_header_extensions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_header_extensions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AudioReceiveConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 remote_ssrc = 1;
  if (has_remote_ssrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remote_ssrc(), output);
  }

  // optional uint32 local_ssrc = 2;
  if (has_local_ssrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->local_ssrc(), output);
  }

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 3;
  for (int i = 0; i < this->header_extensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->header_extensions(i), output);
  }

}

int AudioReceiveConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 remote_ssrc = 1;
    if (has_remote_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_ssrc());
    }

    // optional uint32 local_ssrc = 2;
    if (has_local_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_ssrc());
    }

  }
  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 3;
  total_size += 1 * this->header_extensions_size();
  for (int i = 0; i < this->header_extensions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->header_extensions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioReceiveConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioReceiveConfig*>(&from));
}

void AudioReceiveConfig::MergeFrom(const AudioReceiveConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  header_extensions_.MergeFrom(from.header_extensions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remote_ssrc()) {
      set_remote_ssrc(from.remote_ssrc());
    }
    if (from.has_local_ssrc()) {
      set_local_ssrc(from.local_ssrc());
    }
  }
}

void AudioReceiveConfig::CopyFrom(const AudioReceiveConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioReceiveConfig::IsInitialized() const {

  return true;
}

void AudioReceiveConfig::Swap(AudioReceiveConfig* other) {
  if (other != this) {
    std::swap(remote_ssrc_, other->remote_ssrc_);
    std::swap(local_ssrc_, other->local_ssrc_);
    header_extensions_.Swap(&other->header_extensions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AudioReceiveConfig::GetTypeName() const {
  return "webrtc.rtclog.AudioReceiveConfig";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioSendConfig::kSsrcFieldNumber;
const int AudioSendConfig::kHeaderExtensionsFieldNumber;
#endif  // !_MSC_VER

AudioSendConfig::AudioSendConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AudioSendConfig::InitAsDefaultInstance() {
}

AudioSendConfig::AudioSendConfig(const AudioSendConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AudioSendConfig::SharedCtor() {
  _cached_size_ = 0;
  ssrc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioSendConfig::~AudioSendConfig() {
  SharedDtor();
}

void AudioSendConfig::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AudioSendConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioSendConfig& AudioSendConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
#endif
  return *default_instance_;
}

AudioSendConfig* AudioSendConfig::default_instance_ = NULL;

AudioSendConfig* AudioSendConfig::New() const {
  return new AudioSendConfig;
}

void AudioSendConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ssrc_ = 0u;
  }
  header_extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AudioSendConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ssrc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssrc_)));
          set_has_ssrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_header_extensions;
        break;
      }

      // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_extensions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_header_extensions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_header_extensions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AudioSendConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ssrc = 1;
  if (has_ssrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ssrc(), output);
  }

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
  for (int i = 0; i < this->header_extensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->header_extensions(i), output);
  }

}

int AudioSendConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ssrc = 1;
    if (has_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ssrc());
    }

  }
  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
  total_size += 1 * this->header_extensions_size();
  for (int i = 0; i < this->header_extensions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->header_extensions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioSendConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioSendConfig*>(&from));
}

void AudioSendConfig::MergeFrom(const AudioSendConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  header_extensions_.MergeFrom(from.header_extensions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssrc()) {
      set_ssrc(from.ssrc());
    }
  }
}

void AudioSendConfig::CopyFrom(const AudioSendConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioSendConfig::IsInitialized() const {

  return true;
}

void AudioSendConfig::Swap(AudioSendConfig* other) {
  if (other != this) {
    std::swap(ssrc_, other->ssrc_);
    header_extensions_.Swap(&other->header_extensions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AudioSendConfig::GetTypeName() const {
  return "webrtc.rtclog.AudioSendConfig";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtclog
}  // namespace webrtc

// @@protoc_insertion_point(global_scope)
